---
title: "EDA: Overview of Suicide Rate in a Particular Year"
author: "Michael"
date: 03 Mar 2023
date-modified: "`r Sys.Date()`"
execute: 
  echo: true
  eval: true
  warning: false
format: html
editor: visual
---

## Step-by-Step Data Preparation

### 1. Installing and launching required R packages

```{r}
pacman::p_load("patchwork", "tmap", "ExPanDaR", "kableExtra", "ggstatsplot", "tidyverse")
```

### 2. Loading the data

```{r}
suicidedata_eda_formap <- read_csv("data/suicidedata_eda_formap.csv", show_col_types = FALSE)
```

```{r}
suicidedata_eda <- read_csv("data/suicidedata_eda.csv", show_col_types = FALSE)
```

### 3. Dataset overview
We will check the suicidedata_eda as suicidedata_eda_formap is meant to be combined with the sf file (world)

#### 3.1 Missing Values
```{r}
missing.values <- suicidedata_eda %>%
    gather(key = "key", value = "val") %>%
    mutate(is.missing = is.na(val)) %>%
    group_by(key, is.missing) %>%
    summarise(num.missing = n()) %>%
    filter(is.missing==T) %>%
    select(-is.missing) %>%
    arrange(desc(num.missing)) 
missing.values %>% kable()
```

Visualising Missing Values
```{r}
missing_values <- function(vari = "age_name"){
prepare_missing_values_graph(suicidedata_eda, ts_id = vari)
}
```

By country
```{r}
#| fig-height: 15
#| fig-width: 10
missing_values("country")
```


By gender
```{r}
missing_values("sex_name")
```

By age group
```{r}
missing_values("age_name")
```

By year
```{r}
missing_values("year")
```
Conclusion : The missing values are because of age-standardised (only for Suicide Rates)

#### 3.2 Descriptive statistics

```{r}
descr_stats <- function(year, gender = "Both", age = "All ages") {
  
  descr <- prepare_descriptive_table(suicidedata_eda %>%
                                       filter(year == year,
                                              sex_name == gender,
                                              age_name == age) %>%
                                       select(!c(6,8)) %>%
                                       rename("Number of suicide" = "SN",
                                              "Number of deaths" = "DN",
                                              "Share of deaths from suicide (%)" = "SP",
                                              "Suicide rate" = "SR",
                                              "Mortality rate" = "DR"))
descr$kable_ret  %>%
  kable_styling("condensed", full_width = F, position = "center")
}
```

```{r}
descr_stats(2010, "Both", "All ages")
```

#### 3.3 Distribution 

##### 3.3.1 Histogram of multiple variables
```{r}
plot_multi_distribution <- function(year, gender = "Both", age = "All ages") {
  
suicidedata_hist <- suicidedata_eda %>% 
  filter(year == year,
         sex_name == gender,
         age_name == age) %>%
  select(c(7,9,10,11,12)) %>%
  rename("Number of suicide" = "SN",
         "Number of deaths" = "DN",
         "Share of deaths from suicide (%)" = "SP",
         "Suicide rate" = "SR",
         "Mortality rate" = "DR")
  
suicidedata_hist %>% 
  gather() %>%
  ggplot(aes(value)) +
  facet_wrap( ~key, ncol=3, scales="free") +
  geom_histogram()
}
```

```{r}
plot_multi_distribution(2010, "Both", "All ages")
```
```{r}
suicidedata_hist <- suicidedata_eda %>% 
  filter(year == 2010,
         sex_name == "Both",
         age_name == "All ages")


suicidedata_summary <- suicidedata_hist %>%
  summarise(mean = round(mean(SR)),
            median = round(median(SR)),
            ymax = as.numeric(round((IQR(SR)*1.5) + quantile(SR,0.75))),
            ymin = as.integer(min(SR))) 

#var_mean <- mean(suicidedata_hist[,11])
```


##### 3.3.2 Histogram of individual variables
```{r}
plot_distribution <- function(year, gender = "Both", age = "All ages", vari = SR, title = "Suicide Rate", binwidth = 2) {
  
suicidedata_hist <- suicidedata_eda %>% 
  filter(year == year,
         sex_name == gender,
         age_name == age)

suicidedata_summary <- suicidedata_hist %>%
  summarise(mean = round(mean({{vari}})),
            median = round(median({{vari}})),
            ymax = as.numeric(round((IQR({{vari}})*1.5) + quantile({{vari}},0.75))),
            ymin = as.integer(min({{vari}}))) 

#computing summary statistics of mean, median and lower and upper whiskers in boxplot
var_mean <- suicidedata_summary$mean
var_median <- suicidedata_summary$median
ymax <- suicidedata_summary$ymax
ymin <- suicidedata_summary$ymin

#plotting histogram
h1 <- ggplot(suicidedata_hist, aes(x = {{vari}})) + 
  geom_histogram(color="black", fill="azure4", binwidth = binwidth)  
  
h <- h1 + scale_x_continuous(labels = scales::comma) +
  labs(x = paste0(title,", ",gender,", ",age,", ", year), y = "Count") +
  geom_vline(aes(xintercept = var_mean), col="darkblue", linewidth=1, linetype = "dashed") +
  annotate("text", x=var_mean*1.05, y=max(ggplot_build(h1)$data[[1]]$count)*1.2, label="Mean:", 
           size=4, color="darkblue", hjust = 0) +
  annotate("text", x=var_mean*1.05, y=max(ggplot_build(h1)$data[[1]]$count)*1.1, label=format(var_mean, big.mark = ","),
           size=4, color="darkblue", hjust = 0) +
  geom_vline(aes(xintercept = var_median), col="lightpink4", linewidth=1, linetype = "dashed") +
  annotate("text", x=var_median*0.95, y=max(ggplot_build(h1)$data[[1]]$count)*1.2, label="Median:", 
           size=4, color="lightpink4", hjust = 1) +
  annotate("text", x=var_median*0.95, y=max(ggplot_build(h1)$data[[1]]$count)*1.1, label=format(var_median, big.mark = ","),
           size=4, color="lightpink4", hjust = 1) +
  theme(axis.text.x = element_text(size=8))

#plotting boxplot
b <- ggplot(suicidedata_hist, aes(y = {{vari}})) + 
  geom_boxplot(outlier.colour="firebrick", outlier.shape=16,
               outlier.size=1, notch=FALSE) + 
  coord_flip() + labs(y = "", x = "") + 
  scale_y_continuous(labels = scales::comma) +
  theme(axis.text = element_blank(), axis.ticks = element_blank()) + 
  stat_boxplot(geom="errorbar", width=0.5) +
  annotate("text", x=0.35, y=ymax, label=format(ymax, big.mark = ","), 
           size=3, color="lightpink4") +
  annotate("text", x=0.35, y=ymin, label=format(ymin, big.mark = ","), 
           size=3, color="lightpink4")

#combining plots
suicide_distri <- b / h + plot_layout(heights = c(1, 4)) 

suicide_distri
}

```

```{r}
plot_distribution(2010, "Both", "All ages", SR, "Suicide Rate", 2)
```



### 4. Plotting the choropleth map
#### 4.1 Joining with world map (tmap object)

The object `World` is a spatial object of class `sf` from the [sf package](https://cran.r-project.org/package=sf); it is a `data.frame` with a special column that contains a geometry for each row, in this case polygons

Reference - https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html

```{r}
data("World")
```

Joining the two dataframes together

```{r}
suicidedata_eda_map <- left_join(World, 
                                 suicidedata_eda_formap %>% mutate(across(where(is.numeric), round, 2)),
                          by = c("iso_a3" = "code")) %>%
  select(!c(2,3,4,6,7,8,9,10,11,12,13,14,15)) %>%
  mutate(area = as.numeric(str_remove(`area`, 
                                " \\[km\\^2\\]")), 
         .after = region) %>%
  na.omit()
```


Creating a function to plot

```{r}
plot_map_eda <- function(year, metric = "SR", gender = "T", style = "jenks"){
  
metric_text = case_when(metric == "SR" ~ "Suicide rate",
                        metric == "SP" ~ "Share of deaths from suicide (%)",
                        metric == "SN" ~ "Number of suicide",
                        metric == "DN" ~ "Number of deaths",
                        metric == "DR" ~ "Mortality rate")

age = case_when(metric == "SR" ~ "AS",
                metric == "SP" ~ "All",
                metric == "SN" ~ "All",
                metric == "DN" ~ "All",
                metric == "DR" ~ "All")

gender_text = case_when(gender == "T" ~ "Total",
                        gender == "M" ~ "Male",
                        gender == "F" ~ "Female")
  
tmap_mode("view")

tm_shape(suicidedata_eda_map |> 
           filter(year == year))+
  tm_fill(paste0(metric,"_",age,"_",gender), 
          style = style, 
          palette="YlOrBr", 
          id = "country",
          title = paste0(metric_text, ", ",gender_text,", ", year),
          popup.vars = c(value = paste0(metric,"_",age,"_",gender))) +
  
  tm_borders(col = "grey20",
             alpha = 0.5) 
}

```

```{r}
plot_map_eda(2016, "SR", "M", "jenks")
tmap_mode("plot")
```

